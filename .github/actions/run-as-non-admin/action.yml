# Usage

# - name: Step name
#   if: matrix.os == 'windows-latest'
#   uses: ./.github/actions/run-as-non-admin
#   with:
#     run: |
#       echo "whoami:$(whoami)"
#       npm run test:integration

name: run-as-non-admin
description: Run script without admin user privileges in windows runner

inputs:
  run:
    description: Multiline script to run, e.g. npm test
    required: true

runs:
  using: composite

  steps:
    - name: Prepare env and run cmd as non-admin user
      shell: pwsh
      env:
        OS: ${{ runner.os }}
        RUN: ${{ inputs.run }}
      run: |
        # create non-admin user and run tests

        # fail if not on windows
        if ($env:OS -ne "Windows") { exit 1 }

        $username = "nonadminuser"
        $password = ConvertTo-SecureString "abcdEFGH123$%" -AsPlainText -Force
        $newHomeDir = "C:\Users\$username"

        New-LocalUser $username -Password $password | Out-Null
        Add-LocalGroupMember -Group "Users" -Member $username | Out-Null
        $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

        # remove dev mode so symlink fails if called without junction
        reg delete "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /f

        # create temp folder
        New-Item -ItemType Directory -Path "$newHomeDir\AppData\Local\Temp" -Force

        # make temp folder writable for nonadmin user
        icacls "$newHomeDir" /grant "${username}:(OI)(CI)F" /T

        # using start-process to run command as non admin user requires setting env vars
        $envVars = @{
            HOME = $newHomeDir
            HOMEPATH = "\Users\$username"
            TEMP = "$newHomeDir\AppData\Local\Temp"
            TMP =  "$newHomeDir\AppData\Local\Temp"
            USERNAME = $username
            USERPROFILE = $newHomeDir
        }

        # call command using non admin user credentials
        $process = Start-Process -FilePath "pwsh" `
            -ArgumentList "-NoLogo", "-NonInteractive", "-NoProfile", "-Command", $env:RUN `
            -Credential $credential `
            -Environment $envVars `
            -NoNewWindow `
            -PassThru `
            -RedirectStandardError "error.txt" `
            -RedirectStandardOutput "output.txt" `
            -Wait `

        Get-Content output.txt
        Get-Content error.txt

        if ($process.ExitCode -ne 0) { exit $process.ExitCode }
