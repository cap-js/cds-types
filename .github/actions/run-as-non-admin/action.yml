name: run-as-non-admin
description: Run script without admin user privileges in windows runner

inputs:
  cmd:
    # with node 22, you must use the full path, e.g. c:\Program Files\nodejs\npm.cmd
    description: Command to run, e.g. npm
    required: true
  args:
    description: Arguments to pass to the command
    required: false
    default: ''

runs:
  using: composite

  steps:
    - name: Prepare env and run cmd as non-admin user
      shell: powershell
      env:
        OS: ${{ runner.os }}
        CMD: ${{ inputs.cmd }}
        ARGS: ${{ inputs.args }}
      run: |
        # create non-admin user and run tests
        if ($env:OS -ne "Windows") { exit 1 }

        # make temp folder writable for all users
        icacls $env:TEMP /grant "Everyone:(OI)(CI)F"

        $username = "nonadminuser"
        $password = ConvertTo-SecureString "kragZTWET53$%" -AsPlainText -Force

        New-LocalUser $username -Password $password
        Add-LocalGroupMember -Group "Users" -Member $username
        $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

        $scriptBlock = {
          $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          $isElevated = $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          Write-Host "is elevated: $isElevated"
        }

        $scriptBlockStr = $scriptBlock.ToString()
        $encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($scriptBlockStr))

        $process = Start-Process -FilePath "powershell.exe" `
            -ArgumentList "-NoProfile", `
                          "-NonInteractive", `
                          "-ExecutionPolicy", "Bypass", `
                          "-EncodedCommand", $encodedCommand `
            -Credential $credential `
            -PassThru `
            -Wait `
            -NoNewWindow `
            -RedirectStandardOutput "output.txt" `
            -RedirectStandardError "error.txt" `

        Get-Content output.txt
        Get-Content error.txt

        $process = Start-Process -FilePath "C:\Program Files\nodejs\npm.cmd" `
            -ArgumentList "run test:integration" `
            -Credential $credential `
            -PassThru `
            -Wait `
            -NoNewWindow `
            -RedirectStandardOutput "output.txt" `
            -RedirectStandardError "error.txt" `

        Get-Content output.txt
        Get-Content error.txt

        if ($process.ExitCode -ne 0) { exit $process.ExitCode }


      # run: |
      #   # safe guard
      #   if ($env:OS -ne "Windows") { exit 1 }

      #   # make temp folder writable for all users
      #   icacls $env:TEMP /grant "Everyone:(OI)(CI)F"

      #   $username = -join ((65..90) + (97..122) | Get-Random -Count 12 | % {[char]$_})
      #   $password = ConvertTo-SecureString "kragZTWET53$%" -AsPlainText -Force

      #   New-LocalUser $username -Password $password
      #   Add-LocalGroupMember -Group "Users" -Member $username
      #   $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      #   $scriptBlock = {
      #     Write-Host "start"
      #     $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
      #     $principal = New-Object System.Security.Principal.WindowsPrincipal($identity)
      #     $isAdmin = $principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)
      #     Write-Host "isAdmin: $isAdmin"

      #     ??? npm run test:integration
      #   }

      #   $scriptBlockStr = $scriptBlock.ToString()
      #   $encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($scriptBlockStr))

      #   $process = Start-Process -FilePath "C:\Program Files\nodejs\npm.cmd" `
      #       -ArgumentList "run test:integration" `
      #       -Credential $credential `
      #       -PassThru `
      #       -Wait `
      #       -NoNewWindow `
      #       -RedirectStandardOutput "output.txt" `
      #       -RedirectStandardError "error.txt" `

      #   Get-Content output.txt
      #   Get-Content error.txt

      #   if ($process.ExitCode -ne 0) { exit $process.ExitCode }





      # $scriptBlock = {
      #   $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
      #   $principal = New-Object System.Security.Principal.WindowsPrincipal($identity)
      #   $isAdmin = $principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)
      #   echo "isAdmin: $isAdmin"

      #   & $env:CMD $env:ARGS
      # }


      # $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
      # $principal = New-Object System.Security.Principal.WindowsPrincipal($identity)
      # $isAdmin = $principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)
      # echo "isAdmin: $isAdmin"

      # # safe guard
      # if ($env:OS -ne "Windows") { exit 1 }

      # # make temp folder writable for all users
      # icacls $env:TEMP /grant "Everyone:(OI)(CI)F"

      # $username = -join ((65..90) + (97..122) | Get-Random -Count 12 | % {[char]$_})
      # $password = ConvertTo-SecureString "kragZTWET53$%" -AsPlainText -Force

      # New-LocalUser $username -Password $password
      # Add-LocalGroupMember -Group "Users" -Member $username
      # $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

      # $process = Start-Process -FilePath $env:CMD -ArgumentList $env:ARGS -Credential $credential -PassThru -Wait -NoNewWindow -RedirectStandardOutput "output.txt" -RedirectStandardError "error.txt"

      # $process = Start-Process -FilePath $env:CMD -ArgumentList $env:ARGS -Credential $credential -PassThru -Wait -NoNewWindow -RedirectStandardOutput "output.txt" -RedirectStandardError "error.txt"
      # Get-Content output.txt
      # Get-Content error.txt

      # if ($process.ExitCode -ne 0) { exit $process.ExitCode }

        # $process = Start-Process -FilePath "powershell.exe" `
        #     -ArgumentList "-NoProfile", `
        #                   "-NonInteractive", `
        #                   "-ExecutionPolicy", "Bypass", `
        #                   "-EncodedCommand", $encodedCommand `
        #     -Credential $credential `
        #     -PassThru `
        #     -Wait `
        #     -NoNewWindow `
        #     -RedirectStandardOutput "output.txt" `
        #     -RedirectStandardError "error.txt" `