import assert from 'node:assert'
import cds, { User } from '@sap/cds';
import { Query } from '@sap/cds/apis/cqn';
import { entity, type, struct } from '@sap/cds/apis/csn';

cds.entity

if (global.false) {
  let q1 : Query
  let x1 = q1.INSERT.entries[1].foo

  let csn = cds.parse(`entity Foo {}`)
  let Foo = csn.definitions.Foo as entity
  Foo.query

  let e = new cds.entity

  let x = csn.definitions.Foo
  x instanceof cds.entity
  if (x.kind === 'entity') {
    x.query
    let z = x['@foo']
  }

  let {bar} = Foo.elements
  let baz = (<struct>bar).elements.baz

  let m = cds.linked(csn)
  let Foo2 = m.definitions.Foo
  Foo2.name
  Foo2.keys
  Foo2.is('entity')
}

cds.model = cds.linked({})
let foo = cds.extend({foo:1}).with({bar:2},{car:3})
foo.foo
foo.bar

cds.model = cds.linked({})
let {Test} = cds.test
let test = new Test
assert(test.test === test)
assert(typeof test.run === 'function')
assert(typeof test.in === 'function')
assert(typeof test.log === 'function')
assert(typeof test.data.reset === 'function')
let log = test.log()
console.log('foo')
assert.equal(log.output,'foo\n')
console.log('bar')
assert.equal(log.output,'foo\nbar\n')
log.release()
console.log('car')
assert.equal(log.output,'')

import {
  Service,
  EventContext,
  Request,
  Event,
  // User, >> allready imported above

  ApplicationService,
  MessagingService,
  DatabaseService,
  RemoteService,

  Association,
  Composition,
  // entity,
  event,
  // type,
  array,
  // struct,
  service,

} from '@sap/cds';

{
  let {
    requires,
    // plugins,
    version,
    env,
    home,
    // cli,
    root,

    // compiler,
    compile,
    resolve,
    load,
    get,
    parse ,
    // minify,
    extend,
    // deploy,
    // localize,
    // build,

    reflect,
    linked,
    // infer,
    builtin,
    Association,
    Composition,
    entity,
    event,
    type,
    array,
    struct,
    service,
    // impl: (/** @type {(this:Service, srv:Service, ...etc) => any} */ srv) => srv,
    // protocols: lazy => require('./srv/protocols'),
    // bindings: lazy => require('./srv/bindings'),
    // factory: lazy => require('./srv/factory'),
    // /** @type Service[] */ providers: []

    services,

    server,
    serve,
    connect,
    // middlewares,
    // odata,
    // auth,

    // emit,

    Service,
    EventContext,
    Request,
    Event,
    User,

    // Services, Protocols and Periphery
    ApplicationService,
    MessagingService,
    DatabaseService,
    RemoteService,

    // Contexts and Transactions
    context,
    spawn,
    tx,

    // Helpers
    utils,
    // error,
    // exec,
    test,
    log,
    debug,
    lazify,
    lazified,
    // clone,
    exit,

    ql,
    entities,

    run,
    foreach,
    stream,
    read,
    create,
    insert,
    update,
    delete : _delete,
    // disconnect,
    transaction,

  } = cds
}

cds.service.impl(srv => {
  srv.on('READ', 'Books', () => [{ID:1}])
})

cds.env.requires.db = { kind: 'sqlite' }
// let { Books } = cds.entities

assert (Service && cds.Service === Service)
assert (Request && cds.Request === Request)
assert (Event && cds.Event === Event)
assert (User && cds.User === User)
assert (cds.linked)

class MyService extends cds.ApplicationService {}
console.log (cds.linked(cds.parse(`entity Foo {}`)))
console.log (cds.linked.toString())

SELECT.from('Books').where({ID:1})

let ua = new User
assert (ua.id === 'anonymous')
assert(ua.is('any'))
assert(!ua.is('authenticated-user'))

let u2 = new cds.User('me')
assert (u2.id === 'me')
assert(u2.is('any'))
assert(u2.is('authenticated-user'))

let r = new Request ({event:'foo',data:{foo:'bar'},headers:{x:11}})
assert(r.event === 'foo')
assert(r.data.foo === 'bar')
assert(r.headers.x === 11)

assert (cds.Association)
assert (cds.Composition)

let Books = new cds.entity({name:'Books'})
assert(Books.name === 'Books')
assert(Books.drafts.name === 'Books.drafts')
let q = SELECT.from(Books.drafts || Books).where({ID:1})
assert(q.SELECT.from[0] === 'Books')
DELETE.from(Books.drafts || Books).where({ID:1})
UPDATE(Books.drafts || Books).with({}).where({ID:1})
INSERT.into(Books.drafts || Books).entries({})

if (global.false) {
  let srv = new cds.Service
  let { Books } = srv.entities
  Books.name
  SELECT.from(Books.drafts || Books).where({ID:1})
  srv.before('READ', Books, console.log)
  srv.after('READ', Books, console.log)
  srv.on('READ', Books, console.log)
  srv.before('READ', Books.drafts, console.log)
  srv.after('READ', Books.drafts, console.log)
  srv.on('READ', Books.drafts, console.log)
  srv.before('READ', [ Books, Books.drafts ], console.log)
  srv.after('READ', [ Books, Books.drafts ], console.log)
  srv.on('READ', [ Books, Books.drafts ], console.log)
}
if (global.false) {
  let csn = cds.compile(`entity Foo { key ID: Integer; name: String; }`).to.csn()
  let { Foo } = csn.definitions
  // Foo.name //> error: .name is not defined on unlinked CSN definitions
  let m = cds.linked(csn)
  let { Bar } = m.definitions
  Bar.name //> ok: .name is defined on linked definitions
  SELECT.from(Bar.drafts || Bar).where({ID:1})
}

cds.service.impl(srv => { srv.on('READ', Books, console.log) })
cds.service.impl(function(){ this.on('READ', Books, console.log) })
cds.service.impl(async function(){ this.on('READ', Books, console.log) })
cds.service.impl(async srv => { srv.on('READ', Books, console.log) })

// if (req instanceof cds.Association) console.log()

let model = cds.parse.cdl(`entity Foo { key ID: Integer; name: String; }`)
cds.linked(model)
